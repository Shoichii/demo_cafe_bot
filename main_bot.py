import asyncio
import json
from geopy.geocoders import Nominatim
from random import randint
import logging

from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from utils import locationMsg, addressMsg, cancelMsg

import keyboards as kb
from config import TOKEN
from state import Register
import re

bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

cancel_button = '–û—Ç–º–µ–Ω–∞ üôÖ‚Äç‚ôÇÔ∏è'
pay_button = '–û–ø–ª–∞—Ç–∏—Ç—å üíµ'
delivery_button = '–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É üèç'
phone_number_button = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üìû'
location_button = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç'
ordered_button = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚úÖ'
rating_buttons = ['1 üåü', '2 üåü', '3 üåü', '4 üåü', '5 üåü']

logger = logging.getLogger(__name__)
logging.basicConfig(
    # filename=f'logs/logger.log',
    level=logging.INFO,
    format='%(asctime)s, %(levelname)s, %(name)s, %(message)s',
)
logger.addHandler(logging.StreamHandler())

@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    print(msg)
    with open('./img/onlineShopping.png', 'rb') as greeting_pic:
        await bot.send_photo(
            msg.from_user.id, greeting_pic,
            caption=f'''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è {msg.from_user.full_name}!

–Ø –ö–∞—Ñ–µ–ë–û–¢, –ø–æ–º–æ–≥—É –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ñ–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üç∞''',
            reply_markup=kb.make_order_button())


@dp.message_handler(content_types='web_app_data')
async def get_order(msg: types.web_app_data, state: FSMContext):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ WebApp –∏ –≤—ã–≤–æ–¥ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'''
    data = json.loads(msg.web_app_data.data)
    products = data['products']
    total_cost = data['totalCost']
    result = '–í—ã –∑–∞–∫–∞–∑–∞–ª–∏:\n'
    for x in products:
        result += f"<b>{x['name']} {x['amount']}—à—Ç</b> –Ω–∞ —Å—É–º–º—É: <b>{x['sumCost']} —Ä</b>\n"
    result += f'\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_cost} —Ä</b>'
    await msg.answer(
        result,
        reply_markup=kb.menu_keyboard([cancel_button, pay_button]))
    await state.update_data(total_price=total_cost)


@dp.message_handler(Text(equals=cancel_button))
async def cancle(msg: types.Message, state: FSMContext):
    '''–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞'''
    await cancelMsg.cancleMsg(msg, state, kb)


@dp.message_handler(Text(equals=pay_button))
async def pay(msg: types.Message):
    '''–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'''
    tg_id = msg.from_user.id
    del_msg = await msg.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...', reply_markup=types.ReplyKeyboardRemove())
    del_sticker = await msg.answer_sticker('CAACAgIAAxkBAAEGfF5jew5DNZTWY9eYSB2eXIvLg2uZOgACdFsBAAFji0YM3S9lzUKXpDgrBA')
    await asyncio.sleep(4)
    await bot.delete_message(tg_id, del_msg.message_id)
    await bot.delete_message(tg_id, del_sticker.message_id)
    await msg.answer(
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
        reply_markup=kb.menu_keyboard([cancel_button, delivery_button]))


@dp.message_handler(Text(equals=delivery_button))
async def get_phone_number(msg: types.Message):
    '''–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'''
    await msg.answer(
        f'''–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 

<b>{phone_number_button}</b>''',
        reply_markup=kb.get_contact(cancel_button, phone_number_button))
    await Register.phone_number.set()


@dp.message_handler(state=Register.phone_number, content_types=['contact', 'text'])
async def get_delivery_location(msg: types.Message, state: FSMContext):
    '''–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'''
    if msg.text == cancel_button:
        await state.finish()
        await cancelMsg.cancleMsg(msg, state, kb)
        return
    if not msg.contact:
        result = re.match(r'\b\+?[7,8](\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})\b', msg.text)
        if not result:
            await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
            return
        else:
            await addressMsg.addressMsg(msg, [cancel_button, location_button], kb)
    else:
        await addressMsg.addressMsg(msg, [cancel_button, location_button], kb)
    await Register.location.set()


@dp.message_handler(state=Register.location, content_types=['location', 'text'])
async def order_is_processed(msg: types.Message, state: FSMContext):
    '''–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'''
    geolocator = Nominatim(user_agent="cafe_demo_bot")
    if msg.text == cancel_button:
        await state.finish()
        await cancelMsg.cancleMsg(msg, state, kb)
        return
    if msg.location:
        latitude = msg.location.latitude
        longitude = msg.location.longitude
        location = geolocator.reverse(f'{latitude}, {longitude}')
        await state.update_data(courier_location=[location.latitude + 0.007, location.longitude + 0.005])
        address = location.address.split(',')[0:4]
        address.reverse()
        answer = f'''
–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
(–Ω–∞–ø—Ä–∏–º–µ—Ä –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞, —ç—Ç–∞–∂, –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –¥—Ä.)

–ò–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'''
        await locationMsg.locationMsg(msg, answer, [cancel_button, ordered_button], state, kb, ' '.join(address))
    else:
        location = geolocator.geocode(msg.text)
        await state.update_data(courier_location=[location.latitude + 0.007, location.longitude + 0.005])
        answer = f'''
–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—É—Ä—å–µ—Ä–∞

–ò–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'''
        await locationMsg.locationMsg(msg, answer, [cancel_button, ordered_button], state, kb, msg.text)
    await Register.add_info.set()


@dp.message_handler(state=Register.add_info)
async def add_info(msg: types.Message, state: FSMContext):
    '''–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'''
    if msg.text == cancel_button:
        await state.finish()
        await cancelMsg.cancleMsg(msg, state, kb)
        return
    states = await state.get_data()
    address = states.get('location')
    add_info = states.get('add_info')
    if add_info:
        message = f'''–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É <b>{states.get('total_price')} —Ä—É–±.</b> —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω.
–û–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É 
<b>{address}</b>

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–∞:
<b>{states.get('add_info')}</b>'''
    else:
        message = f'''–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É <b>{states.get('total_price')} —Ä—É–±.</b> —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω.
–û–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É
<b>{address}</b>'''
    if (msg.text == ordered_button or msg.text == cancel_button):
        await msg.answer(message, reply_markup=kb.make_order_button())

        await asyncio.sleep(5)
        with open('./img/courier.png', 'rb') as courier:
            await msg.answer_photo(
                courier, 
                caption=f'–í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ {randint(50, 200)}</b> –≥–æ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏')

        await asyncio.sleep(5)
        with open('./img/locations.png', 'rb') as locations:
            await msg.answer_photo(locations, caption=f'''–ö—É—Ä—å–µ—Ä –ø—Ä–∏–±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É 
<b>{address}</b>''', reply_markup=kb.courier_location())
    else:
        await state.update_data(add_info=msg.text)
        await msg.answer(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞',
            reply_markup=kb.menu_keyboard([cancel_button, ordered_button]))


@dp.callback_query_handler(Text(equals='courier_location'))
async def courier_location(call: types.CallbackQuery, state: FSMContext):
    states = await state.get_data()
    courier_geo = states.get('courier_location')
    print(states, courier_geo)
    await bot.send_location(call.message.chat.id, courier_geo[0], courier_geo[1])
    await asyncio.sleep(5)
    with open('./img/checkout.png', 'rb') as checkout:
        await call.message.answer_photo(
                checkout, 
                caption='''–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É.''', reply_markup=kb.rating(rating_buttons))
    await state.finish()


@dp.callback_query_handler(Text(startswith='rating'))
async def rate(call: types.CallbackQuery):
    print(call)
    await call.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!', show_alert=True)
    await call.message.edit_reply_markup()


if __name__ == '__main__':
    executor.start_polling(dp)
